{
  "hash": "e54171d9237239c1d690d5018fe03fd1",
  "result": {
    "markdown": "---\ntitle: \"Los pipes `%>%` en R\"\ndate: \"2023-08-03\"\ncategories:\n  - dplyr\n  - DT\n  - filter\n  - arrange\n  - dataframe\n  - datatable\n  - pipe\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cargar la librería dplyr\nlibrary(dplyr)\n\n# Cargar la librería DT\nlibrary(DT)\n```\n:::\n\n\nLos pipes **`%>%`** en R son un operador que se utiliza para encadenar varias operaciones en una sola línea de código. Los pipes permiten escribir código de manera más legible y eficiente, ya que evitan la necesidad de crear variables intermedias y reducen la cantidad de código necesario para realizar varias operaciones.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Crear un dataframe de ejemplo\nmy.data.frame <- data.frame(\n  Col1 = c(\"A\", \"B\", \"C\", \"D\"),\n  Col2 = c(1, 2, 3, 4)\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Utilizar los pipes para filtrar y ordenar el dataframe\nmy.data.frame.filtering <- my.data.frame %>%\n  filter(Col2 > 2) %>%\n  arrange(desc(Col2))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Imprimir el dataframe resultante\nmy.data.frame.filtering %>% datatable()\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-b847eded28b5cc279111\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-b847eded28b5cc279111\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\"],[\"D\",\"C\"],[4,3]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Col1<\\/th>\\n      <th>Col2<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":2},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nEn este ejemplo, se carga la librería **`dplyr`** utilizando la función **`library()`**. Luego, se crea un dataframe de ejemplo llamado data_frame. A continuación, se utiliza el operador **`%>%`** para encadenar dos operaciones en una sola línea de código: filtrar las filas donde la columna Col2 es mayor que 2 y ordenar el dataframe por la columna Col2 en orden descendente. El resultado se almacena en un nuevo dataframe llamado data_frame_filtrado y se imprime en la consola. Es importante tener en cuenta que los pipes **`%>%`** se utilizan para encadenar varias operaciones en una sola línea de código, lo que puede hacer que el código sea más legible y eficiente. Además, los pipes se pueden utilizar con muchas librerías de R, no solo con dplyr.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.6.2/htmlwidgets.js\"></script>\r\n<link href=\"../../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/datatables-binding-0.28/datatables.js\"></script>\r\n<script src=\"../../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\r\n<link href=\"../../site_libs/dt-core-1.13.4/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\r\n<link href=\"../../site_libs/dt-core-1.13.4/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/dt-core-1.13.4/js/jquery.dataTables.min.js\"></script>\r\n<link href=\"../../site_libs/crosstalk-1.2.0/css/crosstalk.min.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/crosstalk-1.2.0/js/crosstalk.min.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}