[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ejemplos",
    "section": "",
    "text": "Asignacion # 2 - Agosto: Manipulación de dataframes y cálculos\n\n\n\n\n\n\n\n\n\n\n\n\nAug 11, 2023\n\n\n\n\n\n\n  \n\n\n\n\nAsignación # 1 – Data Engineering – Limpieza de Datos\n\n\n\n\n\n\n\nAgosto\n\n\nDT\n\n\nreadxl\n\n\nstringr\n\n\n\n\n\n\n\n\n\n\n\nAug 5, 2023\n\n\n\n\n\n\n  \n\n\n\n\nDistribución de Gaus (normal) de la longitud de los sépalos por especie\n\n\n\n\n\n\n\niris\n\n\ngaus\n\n\ndesviación normal\n\n\nggplot2\n\n\nggplot\n\n\n\n\n\n\n\n\n\n\n\nAug 4, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLos pipes %&gt;% en R\n\n\n\n\n\n\n\ndplyr\n\n\nDT\n\n\nfilter\n\n\narrange\n\n\ndataframe\n\n\ndatatable\n\n\npipe\n\n\n\n\n\n\n\n\n\n\n\nAug 3, 2023\n\n\n\n\n\n\n  \n\n\n\n\nUtilizando describe() en IRIS\n\n\n\n\n\n\n\npsych\n\n\nDT\n\n\niris\n\n\ndatatable\n\n\n\n\n\n\n\n\n\n\n\nAug 2, 2023\n\n\n\n\n\n\n  \n\n\n\n\nGráfica de barra con ggplot2\n\n\n\n\n\n\n\nggplot2\n\n\nggplot\n\n\ndplyr\n\n\nbarchart\n\n\niris\n\n\n\n\n\n\n\n\n\n\n\nAug 1, 2023\n\n\n\n\n\n\n  \n\n\n\n\nAsignación #2 - Separar cadenas de texto con stringr\n\n\n\n\n\n\n\nstringr\n\n\ncsv\n\n\nDT\n\n\nrbind\n\n\ncbind\n\n\ndataframe\n\n\n\n\n\n\n\n\n\n\n\nJul 27, 2023\n\n\n\n\n\n\n  \n\n\n\n\nAsignación #3 - HyperLink\n\n\n\n\n\n\n\nxlsx\n\n\nreadxl\n\n\nDT\n\n\ndataframe\n\n\ndplyr\n\n\n\n\n\n\n\n\n\n\n\nJul 27, 2023\n\n\n\n\n\n\n  \n\n\n\n\nAsignación #1\n\n\n\n\n\n\n\nstringr\n\n\nDT\n\n\ncsv\n\n\n\n\n\n\n\n\n\n\n\nJul 24, 2023\n\n\n\n\n\n\n  \n\n\n\n\nEjemplo 4\n\n\n\n\n\n\n\ndplyr\n\n\n\n\n\n\n\n\n\n\n\nJul 21, 2023\n\n\n\n\n\n\n  \n\n\n\n\nEjemplo #3 - Interpolación de string con glue\n\n\n\n\n\n\n\n\n\n\n\n\nJul 20, 2023\n\n\n\n\n\n\n  \n\n\n\n\nEjemplo #2 - Gráfica con ggplot2\n\n\n\n\n\n\n\n\n\n\n\n\nJul 19, 2023\n\n\n\n\n\n\n  \n\n\n\n\nEjemplo #1 - Histograma\n\n\n\n\n\n\n\n\n\n\n\n\nJul 18, 2023\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#asignación-1",
    "href": "index.html#asignación-1",
    "title": "Ejemplos",
    "section": "Asignación #1",
    "text": "Asignación #1"
  },
  {
    "objectID": "index.html#ejemplo-4",
    "href": "index.html#ejemplo-4",
    "title": "Ejemplos",
    "section": "Ejemplo #4",
    "text": "Ejemplo #4"
  },
  {
    "objectID": "index.html#ejemplo-3---interpolación-de-string-con-glue",
    "href": "index.html#ejemplo-3---interpolación-de-string-con-glue",
    "title": "Ejemplos",
    "section": "Ejemplo #3 - Interpolación de string con glue",
    "text": "Ejemplo #3 - Interpolación de string con glue"
  },
  {
    "objectID": "index.html#ejemplo-2---gráfica-con-ggplot2",
    "href": "index.html#ejemplo-2---gráfica-con-ggplot2",
    "title": "Ejemplos",
    "section": "Ejemplo #2 - Gráfica con ggplot2",
    "text": "Ejemplo #2 - Gráfica con ggplot2"
  },
  {
    "objectID": "index.html#ejemplo-1---histograma",
    "href": "index.html#ejemplo-1---histograma",
    "title": "Ejemplos",
    "section": "Ejemplo #1 - Histograma",
    "text": "Ejemplo #1 - Histograma"
  },
  {
    "objectID": "test.html",
    "href": "test.html",
    "title": "Asignación #2 - Separa cadenas de texto con stringr",
    "section": "",
    "text": "En esta asignación debemos separar el nombre de la edad y la provincia del distrito, utilizando la libreria stringr\n\n\n\n\n\n\n\n\n\nRespuesta\n\nLlamamos las librerias necesarias.\n\nDT para presentar los dataframe.\nstringr para separar los valores.\n\n\nlibrary(DT)\nlibrary(stringr)\n\nLeemos el archivo csv.\n\nfile &lt;- read.csv(file = \"./DatosPeronales - StringR.csv\")\n\nVisualizamos lo que contiene el archivo.\n\nfile %&gt;% datatable()\n\n\n\n\n\n\nPodemos observar el archivo tiene 2 columnas, Nombre y Dirección, debemos separar los valores de dichas columnas.\nUtilizamos la función str_split para realizar un corte cuando encuentre dicho patrón que pasamos como segundo paramétro.\n\nEl primer paramétro de la función son datos a tratar, como el file contiene las 2 columnas, debemos seleccionar la columna a utilizar, para acceder a dicha columna utilizamos ($).\nEn este caso los nombres y edades están separados por dos divisores, un (/) y un (-) por ende pasamos el operador (|) para que evalue los dos, que si encuentra uno u otro haga el split o corte.\n\n\nsplit.name &lt;- str_split(file$Nombre,\"/ | -\")\n\nEn el caso de la columna de direción solo tiene un divisor que seria el (-)\n\nsplit.address &lt;- str_split(file$Dirección,\"-\")\n\nLa función str_split nos devuelve una lista como resultado, debemos convertir esa lista en un dataframe. En este caso apilamos o creamos filas por cada elemento de la lista llamando a rbind a traves de do.call(), luego lo convertimos en un dataframe. Esto lo realizamos en los dos resultados.\n\ncolumns.name.age &lt;- split.name %&gt;% do.call(rbind,.) %&gt;% data.frame()\n\n\ncolumns.province.district &lt;- split.address %&gt;% do.call(rbind,.) %&gt;% data.frame()\n\nLuego que tenemos los 2 dataframes lo combinamos en uno con cbind\n\nmerge.columns &lt;- cbind(columns.name.age,columns.province.district) %&gt;% data.frame()\n\nCuando tengamos el dataframe resultante debemos parsearle los nombres de las columnas que deseamos.\n\nPrimero separamos en variables cada columna del dataframe.\nLuego dentro un dataframe parseamos las variables con los nombres de las columnas.\n\n\nname &lt;- merge.columns$X1\nage &lt;- merge.columns$X2\nprovince &lt;- merge.columns$X1.1\ndistrict &lt;- merge.columns$X2.1\n\nresult &lt;- data.frame(Nombre=name, Edad=age, Provincia=province, Distrito=district)\n\nPor último pasamos el resultado a un datatable para su presentación final.\n\nresult %&gt;% datatable()"
  },
  {
    "objectID": "assignment-2.html",
    "href": "assignment-2.html",
    "title": "Asignación #2 - Separar cadenas de texto con stringr",
    "section": "",
    "text": "En esta asignación debemos separar el nombre de la edad y la provincia del distrito, utilizando la libreria stringr\n\n\n\n\n\n\n\n\n\nRespuesta\n\nLlamamos las librerias necesarias.\n\nDT para presentar los dataframe.\nstringr para separar los valores.\n\n\nlibrary(DT)\nlibrary(stringr)\n\nLeemos el archivo csv.\n\nfile &lt;- read.csv(file = \"./DatosPeronales - StringR.csv\")\n\nVisualizamos lo que contiene el archivo.\n\nfile %&gt;% datatable()\n\n\n\n\n\n\nPodemos observar el archivo tiene 2 columnas, Nombre y Dirección, debemos separar los valores de dichas columnas.\nUtilizamos la función str_split para realizar un corte cuando encuentre dicho patrón que pasamos como segundo paramétro.\n\nEl primer paramétro de la función son datos a tratar, como el file contiene las 2 columnas, debemos seleccionar la columna a utilizar, para acceder a dicha columna utilizamos ($).\nEn este caso los nombres y edades están separados por dos divisores, un (/) y un (-) por ende pasamos el operador (|) para que evalue los dos, que si encuentra uno u otro haga el split o corte.\n\n\nsplit.name &lt;- str_split(file$Nombre,\"/ | -\")\n\nEn el caso de la columna de direción solo tiene un divisor que seria el (-)\n\nsplit.address &lt;- str_split(file$Dirección,\"-\")\n\nLa función str_split nos devuelve una lista como resultado, debemos convertir esa lista en un dataframe. En este caso apilamos o creamos filas por cada elemento de la lista llamando a rbind a traves de do.call(), luego lo convertimos en un dataframe. Esto lo realizamos en los dos resultados.\n\ncolumns.name.age &lt;- split.name %&gt;% do.call(rbind,.) %&gt;% data.frame()\n\n\ncolumns.province.district &lt;- split.address %&gt;% do.call(rbind,.) %&gt;% data.frame()\n\nLuego que tenemos los 2 dataframes lo combinamos en uno con cbind\n\nmerge.columns &lt;- cbind(columns.name.age,columns.province.district) %&gt;% data.frame()\n\nCuando tengamos el dataframe resultante debemos parsearle los nombres de las columnas que deseamos.\n\nPrimero separamos en variables cada columna del dataframe.\nLuego dentro un dataframe parseamos las variables con los nombres de las columnas.\n\n\nname &lt;- merge.columns$X1\nage &lt;- merge.columns$X2\nprovince &lt;- merge.columns$X1.1\ndistrict &lt;- merge.columns$X2.1\n\nresult &lt;- data.frame(Nombre=name, Edad=age, Provincia=province, Distrito=district)\n\nPor último pasamos el resultado a un datatable para su presentación final.\n\nresult %&gt;% datatable()"
  },
  {
    "objectID": "index.html#asignación-2---separar-cadenas-de-texto-con-stringr",
    "href": "index.html#asignación-2---separar-cadenas-de-texto-con-stringr",
    "title": "Ejemplos",
    "section": "Asignación #2 - Separar cadenas de texto con stringr",
    "text": "Asignación #2 - Separar cadenas de texto con stringr"
  },
  {
    "objectID": "assignment-1.html",
    "href": "assignment-1.html",
    "title": "Asignación #1",
    "section": "",
    "text": "Crear un Rmarkdown que le genere un HTML con lo siguiente\nLeer el archivo en formato CSV t mostrarlo con la librería de R- DT\nEl listado se debe mostrar las columnas necesarias (en el hyperlink no debe mostrar sino la columna que dice Etiqueta)\nColoquele un logo (jpg o png)\nAdjunto documento de guía\nFecha de entrega: lunes 24 de julio - 2023\n\n\n\nRespuesta\n\nSe cargan las librerias necesarias.\n\nlibrary(stringr)\nlibrary(DT)\n\nSe lee el archivo csv.\n\nfile &lt;- read.csv(file = \"./lista-empresas.csv\")\n\nLas funciones link y tag toman un índice como argumento y devuelven el valor correspondiente en la columna Link y Etiqueta del objeto file. El doble corchete [[index]] se utiliza para acceder a un elemento específico dentro de una lista o un data frame.\n\nlink &lt;- function(index) file$Link[[index]]\ntag &lt;- function(index) file$Etiqueta[[index]]\n\nEsta línea de código asigna a la variable iterations el número de elementos en la columna Link del objeto file.\n\niterations &lt;- file$Link %&gt;% length() %&gt;% 1:.\n\nLa función lapply() aplica una función por cada iteración, en cada iteración a traves de la función str_glue() pasamos el link y la etiqueta, en un código HTML que permite crear enlaces &lt;a href=\"url\"&gt;name&lt;/a&gt;\n\nlink_convertion &lt;- lapply(iterations, function(index){\n  return(str_glue(\"&lt;a href='{link(index)}'&gt;{tag(index)}&lt;/a&gt;\"))\n})\n\nTransformamos el link_convertion en filas con rbind y posteriormente en un dataframe.\n\nnew_links &lt;- link_convertion %&gt;% do.call(rbind,.) %&gt;% data.frame(Enlace = .)\n\nCreamos un dataframe nuevo a partir del csv original, con los datos que necesitamos.\n\nfile_filter &lt;- subset(file, select = c(\"Industria\",\"Derpartmento\"))\n\nCombinamos los 2 nuevos dataframe en columnas con cbind\n\nnew_file &lt;- cbind(file_filter,new_links)\n\n\nEl nuevo dataframe resultante de la combinación, lo mostramos en un datatable, con los siguientes parametros:\n\nfilter = \"top\": mustra un barra de busqueda en la parte superior de cada columna.\nclass: permite agregar clases css como:\n\ncell-border: crear bordes por cada celda.\nhover: permite resaltar las filas cuando se pasa el cursor sobre ellas.\n\n\n\nnew_file %&gt;% datatable(escape = FALSE , filter = \"top\", class = 'cell-border hover')"
  },
  {
    "objectID": "sample-1.html",
    "href": "sample-1.html",
    "title": "Ejemplo #1 - Histograma",
    "section": "",
    "text": "Histograma del dataset iris\nCargar el dataset iris\n\ndata(iris)\n\nCrear histograma de los valores de la longitud del sépalo\n\nhist(iris$Sepal.Length)"
  },
  {
    "objectID": "sample-4.html",
    "href": "sample-4.html",
    "title": "Ejemplo 4",
    "section": "",
    "text": "library(dplyr)\n\nCreando un data frame de ejemplo\n\ndatos &lt;- data.frame(\n  nombre = c(\"Juan\", \"María\", \"Pedro\", \"Ana\"),\n  edad = c(25, 30, 20, 35),\n  ciudad = c(\"Madrid\", \"Barcelona\", \"Valencia\", \"Sevilla\")\n)\n\nSeleccionar solo las filas con edad mayor a 25 años\n\ndatos_filtrados &lt;- datos %&gt;%\n  filter(edad &gt; 25)\n\nOrdenar los datos por edad de forma descendente\n\ndatos_ordenados &lt;- datos_filtrados %&gt;%\n  arrange(desc(edad))\n\nSeleccionar solo las columnas de nombre y ciudad\n\ndatos_finales &lt;- datos_ordenados %&gt;%\n  select(nombre, ciudad)\n\nMostrar los datos finales\n\ndatos_finales\n\n  nombre    ciudad\n1    Ana   Sevilla\n2  María Barcelona"
  },
  {
    "objectID": "sample-2.html",
    "href": "sample-2.html",
    "title": "Ejemplo #2 - Gráfica con ggplot2",
    "section": "",
    "text": "Gráfica con Ggplot2\n\nlibrary(ggplot2)\n\n\ndata(iris)\n\n\nSe pasa el dataset de iris.\nse establece los elementos a evaluar, en este caso la longitud y anchura de los sépalos.\nEn el eje de la x irá la longitud, el eje de las y la anchura del sépalo, se establece la representacion por medio de puntos y por último se coloca la leyenda en la parte inferior de la gráfica.\n\n\nggplot(\n  iris,\n  aes(x = Sepal.Length, y = Sepal.Width, color = Species)) + \n  geom_point() +\n  labs(x = \"Longitud del Sépalo\", y = \"Ancho del Sépalo\") +\n  theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "sample-3.html",
    "href": "sample-3.html",
    "title": "Ejemplo #3 - Interpolación de string con glue",
    "section": "",
    "text": "La libreria de stringr, permite interpolar string a traves de la función str_glue()\nEn este caso tenemos las siguientes constantes que colocaremos dentro del string.\n\nnum_1 &lt;- 2\nnum_2 &lt;- 3\nsum &lt;- num_1 + num_2\n\nLlamamos la libreria.\n\nlibrary(stringr)\n\nUtilizamos la función str_glue(), pasando el texto que queremos, para incluir las constantes previamente definidas las envolvemos dentro de unos corchetes.\n\nstr_glue(\"La suma de {num_1} + {num_2} es {sum}\")\n\nLa suma de 2 + 3 es 5"
  },
  {
    "objectID": "posts/assignment-1/index.html",
    "href": "posts/assignment-1/index.html",
    "title": "Asignación #1",
    "section": "",
    "text": "Crear un Rmarkdown que le genere un HTML con lo siguiente\nLeer el archivo en formato CSV t mostrarlo con la librería de R- DT\nEl listado se debe mostrar las columnas necesarias (en el hyperlink no debe mostrar sino la columna que dice Etiqueta)\nColoquele un logo (jpg o png)\nAdjunto documento de guía\nFecha de entrega: lunes 24 de julio - 2023\n\n\n\nRespuesta\n\nSe cargan las librerias necesarias.\n\nlibrary(stringr)\nlibrary(DT)\n\nSe lee el archivo csv.\n\nfile &lt;- read.csv(file = \"./lista-empresas.csv\")\n\nLas funciones link y tag toman un índice como argumento y devuelven el valor correspondiente en la columna Link y Etiqueta del objeto file. El doble corchete [[index]] se utiliza para acceder a un elemento específico dentro de una lista o un data frame.\n\nlink &lt;- function(index) file$Link[[index]]\ntag &lt;- function(index) file$Etiqueta[[index]]\n\nEsta línea de código asigna a la variable iterations el número de elementos en la columna Link del objeto file.\n\niterations &lt;- file$Link %&gt;% length() %&gt;% 1:.\n\nLa función lapply() aplica una función por cada iteración, en cada iteración a traves de la función str_glue() pasamos el link y la etiqueta, en un código HTML que permite crear enlaces &lt;a href=\"url\"&gt;name&lt;/a&gt;\n\nlink_convertion &lt;- lapply(iterations, function(index){\n  return(str_glue(\"&lt;a href='{link(index)}'&gt;{tag(index)}&lt;/a&gt;\"))\n})\n\nTransformamos el link_convertion en filas con rbind y posteriormente en un dataframe.\n\nnew_links &lt;- link_convertion %&gt;% do.call(rbind,.) %&gt;% data.frame(Enlace = .)\n\nCreamos un dataframe nuevo a partir del csv original, con los datos que necesitamos.\n\nfile_filter &lt;- subset(file, select = c(\"Industria\",\"Derpartmento\"))\n\nCombinamos los 2 nuevos dataframe en columnas con cbind\n\nnew_file &lt;- cbind(file_filter,new_links)\n\n\nEl nuevo dataframe resultante de la combinación, lo mostramos en un datatable, con los siguientes parametros:\n\nfilter = \"top\": mustra un barra de busqueda en la parte superior de cada columna.\nclass: permite agregar clases css como:\n\ncell-border: crear bordes por cada celda.\nhover: permite resaltar las filas cuando se pasa el cursor sobre ellas.\n\n\n\nnew_file %&gt;% datatable(escape = FALSE , filter = \"top\", class = 'cell-border hover')"
  },
  {
    "objectID": "posts/assignment-2/index.html",
    "href": "posts/assignment-2/index.html",
    "title": "Asignación #2 - Separar cadenas de texto con stringr",
    "section": "",
    "text": "En esta asignación debemos separar el nombre de la edad y la provincia del distrito, utilizando la libreria stringr\n\n\n\n\n\n\n\n\n\nRespuesta\n\nLlamamos las librerias necesarias.\n\nDT para presentar los dataframe.\nstringr para separar los valores.\n\n\nlibrary(DT)\nlibrary(stringr)\n\nLeemos el archivo csv.\n\nfile &lt;- read.csv(file = \"./DatosPeronales - StringR.csv\")\n\nVisualizamos lo que contiene el archivo.\n\nfile %&gt;% datatable()\n\n\n\n\n\n\nPodemos observar el archivo tiene 2 columnas, Nombre y Dirección, debemos separar los valores de dichas columnas.\nUtilizamos la función str_split para realizar un corte cuando encuentre dicho patrón que pasamos como segundo paramétro.\n\nEl primer paramétro de la función son datos a tratar, como el file contiene las 2 columnas, debemos seleccionar la columna a utilizar, para acceder a dicha columna utilizamos ($).\nEn este caso los nombres y edades están separados por dos divisores, un (/) y un (-) por ende pasamos el operador (|) para que evalue los dos, que si encuentra uno u otro haga el split o corte.\n\n\nsplit.name &lt;- str_split(file$Nombre,\"/ | -\")\n\nEn el caso de la columna de direción solo tiene un divisor que seria el (-)\n\nsplit.address &lt;- str_split(file$Dirección,\"-\")\n\nLa función str_split nos devuelve una lista como resultado, debemos convertir esa lista en un dataframe. En este caso apilamos o creamos filas por cada elemento de la lista llamando a rbind a traves de do.call(), luego lo convertimos en un dataframe. Esto lo realizamos en los dos resultados.\n\ncolumns.name.age &lt;- split.name %&gt;% do.call(rbind,.) %&gt;% data.frame()\n\n\ncolumns.province.district &lt;- split.address %&gt;% do.call(rbind,.) %&gt;% data.frame()\n\nLuego que tenemos los 2 dataframes lo combinamos en uno con cbind\n\nmerge.columns &lt;- cbind(columns.name.age,columns.province.district) %&gt;% data.frame()\n\nCuando tengamos el dataframe resultante debemos parsearle los nombres de las columnas que deseamos.\n\nPrimero separamos en variables cada columna del dataframe.\nLuego dentro un dataframe parseamos las variables con los nombres de las columnas.\n\n\nname &lt;- merge.columns$X1\nage &lt;- merge.columns$X2\nprovince &lt;- merge.columns$X1.1\ndistrict &lt;- merge.columns$X2.1\n\nresult &lt;- data.frame(Nombre=name, Edad=age, Provincia=province, Distrito=district)\n\nPor último pasamos el resultado a un datatable para su presentación final.\n\nresult %&gt;% datatable()"
  },
  {
    "objectID": "posts/sample-3/index.html",
    "href": "posts/sample-3/index.html",
    "title": "Ejemplo #3 - Interpolación de string con glue",
    "section": "",
    "text": "La libreria de stringr, permite interpolar string a traves de la función str_glue()\nEn este caso tenemos las siguientes constantes que colocaremos dentro del string.\n\nnum_1 &lt;- 2\nnum_2 &lt;- 3\nsum &lt;- num_1 + num_2\n\nLlamamos la libreria.\n\nlibrary(stringr)\n\nUtilizamos la función str_glue(), pasando el texto que queremos, para incluir las constantes previamente definidas las envolvemos dentro de unos corchetes.\n\nstr_glue(\"La suma de {num_1} + {num_2} es {sum}\")\n\nLa suma de 2 + 3 es 5"
  },
  {
    "objectID": "posts/sample-1/index.html",
    "href": "posts/sample-1/index.html",
    "title": "Ejemplo #1 - Histograma",
    "section": "",
    "text": "Histograma del dataset iris\nCargar el dataset iris\n\ndata(iris)\n\nCrear histograma de los valores de la longitud del sépalo\n\nhist(iris$Sepal.Length)"
  },
  {
    "objectID": "posts/sample-2/index.html",
    "href": "posts/sample-2/index.html",
    "title": "Ejemplo #2 - Gráfica con ggplot2",
    "section": "",
    "text": "Gráfica con Ggplot2\n\nlibrary(ggplot2)\n\n\ndata(iris)\n\n\nSe pasa el dataset de iris.\nse establece los elementos a evaluar, en este caso la longitud y anchura de los sépalos.\nEn el eje de la x irá la longitud, el eje de las y la anchura del sépalo, se establece la representacion por medio de puntos y por último se coloca la leyenda en la parte inferior de la gráfica.\n\n\nggplot(\n  iris,\n  aes(x = Sepal.Length, y = Sepal.Width, color = Species)) + \n  geom_point() +\n  labs(x = \"Longitud del Sépalo\", y = \"Ancho del Sépalo\") +\n  theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "posts/sample-4/index.html",
    "href": "posts/sample-4/index.html",
    "title": "Ejemplo 4",
    "section": "",
    "text": "library(dplyr)\n\nCreando un data frame de ejemplo\n\ndatos &lt;- data.frame(\n  nombre = c(\"Juan\", \"María\", \"Pedro\", \"Ana\"),\n  edad = c(25, 30, 20, 35),\n  ciudad = c(\"Madrid\", \"Barcelona\", \"Valencia\", \"Sevilla\")\n)\n\nSeleccionar solo las filas con edad mayor a 25 años\n\ndatos_filtrados &lt;- datos %&gt;%\n  filter(edad &gt; 25)\n\nOrdenar los datos por edad de forma descendente\n\ndatos_ordenados &lt;- datos_filtrados %&gt;%\n  arrange(desc(edad))\n\nSeleccionar solo las columnas de nombre y ciudad\n\ndatos_finales &lt;- datos_ordenados %&gt;%\n  select(nombre, ciudad)\n\nMostrar los datos finales\n\ndatos_finales\n\n  nombre    ciudad\n1    Ana   Sevilla\n2  María Barcelona"
  },
  {
    "objectID": "posts/assignment-3/index.html",
    "href": "posts/assignment-3/index.html",
    "title": "Asignación #3 - HyperLink",
    "section": "",
    "text": "Debe combinar la columna Category y Link, para formar un hipervinculo.\n\n\n\n\n\n\n\n\n\nRespuesta\n\nLibrerias necesarias.\n\nlibrary(readxl)\nlibrary(stringr)\nlibrary(DT)\nlibrary(dplyr)\n\nLeemos el archivo de excel y lo visualizamos.\n\nfile &lt;- read_excel(path = \"./dp-gallery-link.xlsx\")\nfile\n\n# A tibble: 37 × 4\n     `#` Area               Category       Link                                 \n   &lt;dbl&gt; &lt;chr&gt;              &lt;chr&gt;          &lt;chr&gt;                                \n 1     1 Health             Cadio Vascular https://dataspeople.ai/post/gallery/…\n 2     2 Agriculture        Wine           https://dataspeople.ai/post/gallery/…\n 3     3 World Economic     Wolrd Econimic https://dataspeople.ai/post/gallery/…\n 4     4 Financial Services Credit         https://dataspeople.ai/post/gallery/…\n 5     5 Insurance          Cars Loss      https://dataspeople.ai/post/gallery/…\n 6     6 Logistic           Supply Chain   https://dataspeople.ai/post/gallery/…\n 7     7 Ambient            Forest Fire    https://dataspeople.ai/post/gallery/…\n 8     8 Retail-Sales       Supermarket    https://dataspeople.ai/post/gallery/…\n 9     9 Health             Disease        https://dataspeople.ai/post/gallery/…\n10    10 Real Estate        Real Estate    https://dataspeople.ai/post/gallery/…\n# ℹ 27 more rows\n\n\nCreamos un dataframe que contenga la columna Category y Link y otro solo Area.\n\ncolumns.category.link &lt;- subset(file, select = c(\"Category\", \"Link\"))\ncolumn.area &lt;- subset(file, select = c(\"Area\"))\n\nCombinamos el dataframe de Category y Link para crear el hipervinculo.\n\nCreamos un vector llamado iterations que contiene una secuencia de números enteros que van desde 1 hasta la longitud del vector columns.category.link$Category.\nSe utiliza la función lapply() para crear una lista de hipervínculos a partir de dos vectores en un dataframe llamado columns.category.link.\nLa función anónima toma el índice actual del elemento y lo utiliza para extraer el valor correspondiente de las columnas Category y Link del dataframe columns.category.link.\nLos hipervínculos se crean utilizando la función str_glue() de la libreria stringr para concatenar la etiqueta del hipervínculo y la URL.\n\n\niterations &lt;- columns.category.link$Category %&gt;% length() %&gt;% 1:.\n\nhyperlink &lt;- lapply(iterations, function(index) {\n    category &lt;- columns.category.link$Category[[index]]\n    link &lt;- columns.category.link$Link[[index]]\n    str_glue(\"&lt;a href='{link}'&gt;{category}&lt;/a&gt;\") %&gt;% return()\n})\n\n\nLa lista hyperlink le apilamos sus valores con do.call(rbind) y luego lo convertimos en un dataframe con encabezado Hyperlink\nPosteriormente combinamos el dataframe column.area y column.hyperlink con cbind().\n\n\ncolumn.hyperlink &lt;- hyperlink %&gt;% do.call(rbind, .) %&gt;% data.frame(Hyperlink = .)\nresult &lt;- cbind(column.area, column.hyperlink)\n\n\nTabla Normal\n\nresult %&gt;% datatable(\n  escape = FALSE, \n  rownames = FALSE\n)\n\n\n\n\n\n\n\n\nTabla - Valores agrupados por Area\n\ndatatable(\n  result[order(result$Area), ],\n  escape = FALSE, \n  extensions = \"RowGroup\", \n  options = list(\n    rowGroup = list(dataSrc = 0)\n  ),\n  rownames = FALSE\n)"
  },
  {
    "objectID": "posts/assignment-3/assignment-3.html",
    "href": "posts/assignment-3/assignment-3.html",
    "title": "Asignación #3 - HyperLink",
    "section": "",
    "text": "Debe combinar la columna Category y Link, para formar un hipervinculo.\n\n\n\n\n\n\n\n\n\nRespuesta\n\nLibrerias necesarias.\n\nlibrary(readxl)\nlibrary(stringr)\nlibrary(DT)\nlibrary(dplyr)\n\nLeemos el archivo de excel y lo visualizamos.\n\nfile &lt;- read_excel(path = \"./dp-gallery-link.xlsx\")\nfile\n\n# A tibble: 37 × 4\n     `#` Area               Category       Link                                 \n   &lt;dbl&gt; &lt;chr&gt;              &lt;chr&gt;          &lt;chr&gt;                                \n 1     1 Health             Cadio Vascular https://dataspeople.ai/post/gallery/…\n 2     2 Agriculture        Wine           https://dataspeople.ai/post/gallery/…\n 3     3 World Economic     Wolrd Econimic https://dataspeople.ai/post/gallery/…\n 4     4 Financial Services Credit         https://dataspeople.ai/post/gallery/…\n 5     5 Insurance          Cars Loss      https://dataspeople.ai/post/gallery/…\n 6     6 Logistic           Supply Chain   https://dataspeople.ai/post/gallery/…\n 7     7 Ambient            Forest Fire    https://dataspeople.ai/post/gallery/…\n 8     8 Retail-Sales       Supermarket    https://dataspeople.ai/post/gallery/…\n 9     9 Health             Disease        https://dataspeople.ai/post/gallery/…\n10    10 Real Estate        Real Estate    https://dataspeople.ai/post/gallery/…\n# ℹ 27 more rows\n\n\nCreamos un dataframe que contenga la columna Category y Link y otro solo Area.\n\ncolumns.category.link &lt;- subset(file, select = c(\"Category\", \"Link\"))\ncolumn.area &lt;- subset(file, select = c(\"Area\"))\n\nCombinamos el dataframe de Category y Link para crear el hipervinculo.\n\nCreamos un vector llamado iterations que contiene una secuencia de números enteros que van desde 1 hasta la longitud del vector columns.category.link$Category.\nSe utiliza la función lapply() para crear una lista de hipervínculos a partir de dos vectores en un dataframe llamado columns.category.link.\nLa función anónima toma el índice actual del elemento y lo utiliza para extraer el valor correspondiente de las columnas Category y Link del dataframe columns.category.link.\nLos hipervínculos se crean utilizando la función str_glue() de la libreria stringr para concatenar la etiqueta del hipervínculo y la URL.\n\n\niterations &lt;- columns.category.link$Category %&gt;% length() %&gt;% 1:.\n\nhyperlink &lt;- lapply(iterations, function(index) {\n    category &lt;- columns.category.link$Category[[index]]\n    link &lt;- columns.category.link$Link[[index]]\n    str_glue(\"&lt;a href='{link}'&gt;{category}&lt;/a&gt;\") %&gt;% return()\n})\n\n\nLa lista hyperlink le apilamos sus valores con do.call(rbind) y luego lo convertimos en un dataframe con encabezado Hyperlink\nPosteriormente combinamos el dataframe column.area y column.hyperlink con cbind().\n\n\ncolumn.hyperlink &lt;- hyperlink %&gt;% do.call(rbind, .) %&gt;% data.frame(Hyperlink = .)\nresult &lt;- cbind(column.area, column.hyperlink)\n\n\nTabla Normal\n\nresult %&gt;% datatable(\n  escape = FALSE, \n  rownames = FALSE\n)\n\n\n\n\n\n\n\n\nTabla - Valores agrupados por Area\n\ndatatable(\n  result[order(result$Area), ],\n  escape = FALSE, \n  extensions = \"RowGroup\", \n  options = list(\n    rowGroup = list(dataSrc = 0)\n  ),\n  rownames = FALSE\n)"
  },
  {
    "objectID": "posts/prueba/index.html",
    "href": "posts/prueba/index.html",
    "title": "Asignación # 1 – Data Engineering – Limpieza de Datos",
    "section": "",
    "text": "Fecha de entrega: miércoles 10 de agosto-2023\nBuscar en R, funciones que de librerias que ya permiten arreglar los datos:\nTrabajo en equipo, la entrega es individual\nStringr y otras – investigar – compartir conocimientos entre todos"
  },
  {
    "objectID": "posts/prueba/index.html#archivo-original",
    "href": "posts/prueba/index.html#archivo-original",
    "title": "Asignación # 1 – Data Engineering – Limpieza de Datos",
    "section": "Archivo Original",
    "text": "Archivo Original\n\nfile %&gt;% datatable(class = c(\"compact\",\"cell-border\"), callback = JS('table.page(3).draw(false);'))"
  },
  {
    "objectID": "posts/prueba/index.html#librerias",
    "href": "posts/prueba/index.html#librerias",
    "title": "Asignación # 1 – Data Engineering – Limpieza de Datos",
    "section": "Librerias",
    "text": "Librerias\n\nlibrary(stringr)\nlibrary(readxl)\nlibrary(DT)"
  },
  {
    "objectID": "posts/prueba/index.html#lectura-del-archivo-excel",
    "href": "posts/prueba/index.html#lectura-del-archivo-excel",
    "title": "Asignación # 1 – Data Engineering – Limpieza de Datos",
    "section": "Lectura del archivo excel",
    "text": "Lectura del archivo excel\n\nfile &lt;- read_excel(\"./datos_energia-taller-con-datos-fotovoltaicas.xlsx\")"
  },
  {
    "objectID": "posts/prueba/index.html#eliminando-las-celdas-vacias",
    "href": "posts/prueba/index.html#eliminando-las-celdas-vacias",
    "title": "Asignación # 1 – Data Engineering – Limpieza de Datos",
    "section": "Eliminando las celdas vacias",
    "text": "Eliminando las celdas vacias\n\nfile.trimmed &lt;- file %&gt;% na.omit()\n\n\nfile.trimmed  %&gt;% datatable(class = c(\"compact\",\"cell-border\"), callback = JS('table.page(3).draw(false);'))"
  },
  {
    "objectID": "posts/august-assignment-1/index.html",
    "href": "posts/august-assignment-1/index.html",
    "title": "Asignación # 1 – Data Engineering – Limpieza de Datos",
    "section": "",
    "text": "Fecha de entrega: miércoles 10 de agosto-2023\nBuscar en R, funciones que de librerias que ya permiten arreglar los datos:\nTrabajo en equipo, la entrega es individual\nStringr y otras – investigar – compartir conocimientos entre todos"
  },
  {
    "objectID": "posts/august-assignment-1/index.html#librerias",
    "href": "posts/august-assignment-1/index.html#librerias",
    "title": "Asignación # 1 – Data Engineering – Limpieza de Datos",
    "section": "Librerias",
    "text": "Librerias\n\nlibrary(stringr)\nlibrary(readxl)\nlibrary(DT)\nlibrary(ggplot2)\nlibrary(psych)\nlibrary(R.utils)\nlibrary(dplyr)"
  },
  {
    "objectID": "posts/august-assignment-1/index.html#lectura-del-archivo-excel",
    "href": "posts/august-assignment-1/index.html#lectura-del-archivo-excel",
    "title": "Asignación # 1 – Data Engineering – Limpieza de Datos",
    "section": "Lectura del archivo excel",
    "text": "Lectura del archivo excel\n\nfile &lt;- read_excel(\"./datos_energia-taller-con-datos-fotovoltaicas.xlsx\")"
  },
  {
    "objectID": "posts/august-assignment-1/index.html#archivo-original",
    "href": "posts/august-assignment-1/index.html#archivo-original",
    "title": "Asignación # 1 – Data Engineering – Limpieza de Datos",
    "section": "Archivo Original",
    "text": "Archivo Original\n\nfile %&gt;% datatable(class = c(\"compact\",\"cell-border\"), callback = JS('table.page(3).draw(false);'))"
  },
  {
    "objectID": "posts/august-assignment-1/index.html#eliminando-las-celdas-vacias",
    "href": "posts/august-assignment-1/index.html#eliminando-las-celdas-vacias",
    "title": "Asignación # 1 – Data Engineering – Limpieza de Datos",
    "section": "Eliminando las celdas vacias",
    "text": "Eliminando las celdas vacias\n\nfile.trimmed &lt;- file %&gt;% na.omit()\n\n\nfile.trimmed  %&gt;% datatable(class = c(\"compact\",\"cell-border\"), callback = JS('table.page(3).draw(false);'))"
  },
  {
    "objectID": "posts/august-sample-1/index.html",
    "href": "posts/august-sample-1/index.html",
    "title": "Gráfica de barra con ggplot2",
    "section": "",
    "text": "Gráfica de barras con los valores correspondientes en cada barra utilizando el dataset iris en ggplot2 en R, se puede seguir los siguientes pasos:\n\nCargar la librería ggplot2 , dplyr y el dataset iris:\n\n\nlibrary(ggplot2)\nlibrary(dplyr)\n\n\ndata(iris)\n\n\nSeleccionar las variables a utilizar y crear un dataframe con los valores correspondientes:\n\n\ndf &lt;- iris %&gt;% \n  group_by(Species) %&gt;% \n  summarise(Media = mean(Sepal.Length)) %&gt;% \n  top_n(5)\n\nSelecting by Media\n\n\nEn este caso, se selecciona la variable Species y se calcula la media de la variable Sepal.Length para cada especie. Luego, se seleccionan las 5 especies con mayor media.\n\nCrear la gráfica de barras utilizando la función geom_bar() y agregar las etiquetas de texto utilizando la función geom_text():\n\n\nggplot(df, aes(x = Species, y = Media, fill = Species)) + \n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = round(Media, 2)), vjust = -0.5) +\n  ggtitle(\"Media de Sepal.Length por especie\") +\n  xlab(\"Especie\") +\n  ylab(\"Media de Sepal.Length\") +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\nEn este caso, se utiliza la función ggplot() para crear la gráfica de barras y se especifica el dataframe df y las variables Species y Media como los ejes x e y, respectivamente. La función geom_bar() se utiliza para crear las barras y la función geom_text() se utiliza para agregar las etiquetas de texto con los valores correspondientes. Además, se agrega un título y etiquetas para los ejes x e y utilizando las funciones ggtitle(), xlab() e ylab(). Por último, se utiliza la función theme() para centrar el título de la gráfica."
  },
  {
    "objectID": "posts/august-sample-2/index.html",
    "href": "posts/august-sample-2/index.html",
    "title": "Utilizando describe() en IRIS",
    "section": "",
    "text": "# Cargar la librería psych\nlibrary(psych)\n\n# Cargar la librería datable\nlibrary(DT)\n\nUtilizamos la función describe() de la librería psych en R con los datos del dataset iris:\n\n# Utilizar el dataset iris\ndata(iris)\n\n# Obtener estadísticas descriptivas utilizando describe()\nresults &lt;- describe(iris)\n\n# Imprimir los resultados\nresults %&gt;% datatable()\n\n\n\n\n\n\nSe utiliza la función data() para cargar el dataset iris. A continuación, se utiliza la función describe() para obtener estadísticas descriptivas del dataset iris. Los resultados se almacenan en un data frame llamado results.\nLa función describe() de la librería psych proporciona un conjunto de estadísticas descriptivas, como la media, la mediana, la desviación estándar, los valores mínimo y máximo, entre otros, para cada variable del dataset iris. Es importante tener en cuenta que la función describe() es muy útil para obtener estadísticas descriptivas de un conjunto de datos, lo que puede ayudar a comprender mejor las características y distribución de los datos."
  },
  {
    "objectID": "posts/august-sample-3/index.html",
    "href": "posts/august-sample-3/index.html",
    "title": "Los pipes %>% en R",
    "section": "",
    "text": "# Cargar la librería dplyr\nlibrary(dplyr)\n\n# Cargar la librería DT\nlibrary(DT)\n\nLos pipes %&gt;% en R son un operador que se utiliza para encadenar varias operaciones en una sola línea de código. Los pipes permiten escribir código de manera más legible y eficiente, ya que evitan la necesidad de crear variables intermedias y reducen la cantidad de código necesario para realizar varias operaciones.\n\n# Crear un dataframe de ejemplo\nmy.data.frame &lt;- data.frame(\n  Col1 = c(\"A\", \"B\", \"C\", \"D\"),\n  Col2 = c(1, 2, 3, 4)\n)\n\n\n# Utilizar los pipes para filtrar y ordenar el dataframe\nmy.data.frame.filtering &lt;- my.data.frame %&gt;%\n  filter(Col2 &gt; 2) %&gt;%\n  arrange(desc(Col2))\n\n\n# Imprimir el dataframe resultante\nmy.data.frame.filtering %&gt;% datatable()\n\n\n\n\n\n\nEn este ejemplo, se carga la librería dplyr utilizando la función library(). Luego, se crea un dataframe de ejemplo llamado data_frame. A continuación, se utiliza el operador %&gt;% para encadenar dos operaciones en una sola línea de código: filtrar las filas donde la columna Col2 es mayor que 2 y ordenar el dataframe por la columna Col2 en orden descendente. El resultado se almacena en un nuevo dataframe llamado data_frame_filtrado y se imprime en la consola. Es importante tener en cuenta que los pipes %&gt;% se utilizan para encadenar varias operaciones en una sola línea de código, lo que puede hacer que el código sea más legible y eficiente. Además, los pipes se pueden utilizar con muchas librerías de R, no solo con dplyr."
  },
  {
    "objectID": "posts/august-sample-4/index.html",
    "href": "posts/august-sample-4/index.html",
    "title": "Distribución de Gaus (normal) de la longitud de los sépalos por especie",
    "section": "",
    "text": "library(ggplot2)\n\nPara realizar la desviación normal del dataset iris en R y mostrar el resultado en una gráfica de campana de Gauss utilizando los datos del tamaño del sépalo y la especie, se puede seguir los siguientes pasos:\n\nCargar el dataset iris y seleccionar las variables de interés:\n\n\n# Cargar el dataset iris\ndata(iris)\n\n# Seleccionar las variables de interés\niris_sepal &lt;- iris[, c(\"Sepal.Length\", \"Species\")]\n\nEn este ejemplo, se carga el dataset iris utilizando la función data(). Luego, se seleccionan las variables de interés utilizando la sintaxis iris[, c(\"Sepal.Length\", \"Species\")]. En este caso, se selecciona la variable Sepal.Length que corresponde al tamaño del sépalo y la variable Species que corresponde a la especie de la flor.\n\nRealizar la desviación normal de la variable Sepal.Length utilizando la función scale():\n\n\n# Realizar la desviación normal de la variable Sepal.Length\niris_sepal$Sepal.Length &lt;- scale(iris_sepal$Sepal.Length)\n\nEn este paso, se utiliza la función scale() para realizar la desviación normal de la variable Sepal.Length.\n\nCrear la gráfica de campana de Gauss utilizando la función ggplot2:\n\n\n# Crear la gráfica de campana de Gauss\nggplot(iris_sepal, aes(x = Sepal.Length, fill = Species)) +\n  geom_density(alpha = 0.5) +\n  ggtitle(\"Gráfica de campana de Gauss para el tamaño del sépalo por especie\")\n\n\n\n\nEn este paso, se utiliza la función ggplot() para crear la gráfica de campana de Gauss. Se utiliza geom_density() para agregar la curva de densidad y se especifica fill = Species para separar las curvas de densidad por especie. La función ggtitle() se utiliza para agregar un título a la gráfica.Al ejecutar este código, se mostrará la gráfica de campana de Gauss para el tamaño del sépalo por especie después de realizar la desviación normal."
  },
  {
    "objectID": "posts/august-assignment-2/index.html",
    "href": "posts/august-assignment-2/index.html",
    "title": "Asignacion # 2 - Agosto: Manipulación de dataframes y cálculos",
    "section": "",
    "text": "Proceso\n\n\nlibrary(readxl)\nlibrary(DT)\nlibrary(tibble)\nlibrary(purrr)\n\n\nfile &lt;- read_xlsx(path = \"./data1.xlsx\")\nfile.values &lt;- read_xlsx(path = \"./data2.xlsx\")\n\n\nfile %&gt;% datatable()\n\n\n\n\n\n\n\nfile.values %&gt;% datatable()\n\n\n\n\n\n\n\n`Columna A, Fila 1` &lt;- rep(file.values[1,2] %&gt;% as.numeric ,nrow(file))\n`Columna A, Fila 2` &lt;- rep(file.values[2,2] %&gt;% as.numeric ,nrow(file))\n`Columna A, Fila 3` &lt;- rep(file.values[3,2] %&gt;% as.numeric ,nrow(file))\n\n\ndf &lt;- file %&gt;% \n  add_column(., `Columna A, Fila 1`,.after = \"instalada\") %&gt;%\n  add_column(., `Columna A, Fila 2`,.after = \"generacion\") %&gt;%\n  add_column(., `Columna A, Fila 3`,.after = \"firme\")\n\n\ndf %&gt;% datatable\n\n\n\n\n\n\n\n`result preview` &lt;- (df[1,2] * df[1,3]) + (df[1,4] * df[1,5]) + (df[1,6] * df[1,7])\n\n\n`result preview`\n\n  instalada\n1   4754.26\n\n\n\noperation &lt;- map(1:nrow(df), function(x){\n  math.operation &lt;- (df[x,2] * df[x,3]) + (df[x,4] * df[x,5]) + (df[x,6] * df[x,7])\n  math.round &lt;- round(math.operation,2)\n  return(math.round)\n})\n\n\nresult &lt;- operation %&gt;% do.call(rbind,.) %&gt;% data.frame()\ncolnames(result) &lt;- \"Resultado\"\n\n\nresult %&gt;% datatable()\n\n\n\n\n\n\n\ndf.result &lt;- df %&gt;% \n  add_column(., result,.after = \"planta\")"
  },
  {
    "objectID": "posts/august-assignment-2/index.html#resultado-final",
    "href": "posts/august-assignment-2/index.html#resultado-final",
    "title": "Asignacion # 2 - Agosto: Manipulación de Datadaframes y cálculos",
    "section": "Resultado Final",
    "text": "Resultado Final\n\ndf.result %&gt;% datatable()"
  },
  {
    "objectID": "posts/august-assignment-2/index.html#resultado-final-1",
    "href": "posts/august-assignment-2/index.html#resultado-final-1",
    "title": "Asignacion # 2 - Agosto: Manipulación de dataframes y cálculos",
    "section": "Resultado Final #1",
    "text": "Resultado Final #1\n\ndf.result %&gt;% datatable()"
  }
]